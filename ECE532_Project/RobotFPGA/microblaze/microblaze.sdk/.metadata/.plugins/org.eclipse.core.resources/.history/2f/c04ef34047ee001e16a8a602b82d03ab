/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "platform.h"
#include "xil_printf.h"
#include "xiic.h"
#include "xiic_l.h"
#include "sleep.h"
#define iic_baseAddr 0x40800000

XIic iicInst;
u8 WriteBuffer[24];



int main()
{
	xil_printf("jkljlfjkads");
    init_platform();
    xil_printf("jkljlfjkads");

//    XIic_CfgInitialize(XIic *InstancePtr, XIic_Config *Config,
//    		       UINTPTR EffectiveAddr);
//
//    XIic_Start( *InstancePtr);
//
    u8 Index;
    print("klafkjlfs");
	int Status;
	XIic_Config *ConfigPtr;	/* Pointer to configuration data */
	u8 Address = 0x68;



	WriteBuffer[0] = (u8) (Address);


	XIic_MultiMasterInclude();


	ConfigPtr = XIic_LookupConfig(iic_baseAddr);

	if (ConfigPtr == NULL) {
		return XST_FAILURE;
	}
	print("k");
	Status = XIic_CfgInitialize(&iicInst, ConfigPtr,
					ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}




	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Set the address of the slave.
	 */
	Status = XIic_SetAddress(&iicInst, XII_ADDR_TO_SEND_TYPE,
				 0x68);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	iicInst.Stats.TxErrors = 0;
	/*
	 * Set the defaults.
	 */

	/*
	 * Start the IIC device.
	 */
	Status = XIic_Start(&iicInst);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Write to the EEPROM.
	 */

//	WriteBuffer[0] = 0x0;
//	XIic_MasterSend(&iicInst, WriteBuffer, 16);

	//XIic_WriteReg(0x68, 0x6B, 0x00);
	XIic_SetAddress(&iicInst, XII_ADD_TO_SEND_TYPE, 0x68);

	while(1) {
		u16 gyroPtr;
		//xil_printf("%d \n", XIic_ReadReg(0x68, 0x43));
		XIic_Recv(iic_baseAddr, 0x43, gyroPtr, 16, XIIC_STOP);
		xil_printf("%d \n", gyroPtr);


	}

    print("Hello World\n\r");

    cleanup_platform();
    return 0;
}
