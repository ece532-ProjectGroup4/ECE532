/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
//#include "xil_printf.h"
#include <stdint.h>
#include <stdbool.h>
#include <math.h>

// JOSH
#include "PmodDHB1.h"
#include "PWM.h"
#include "sleep.h"
#include "xil_cache.h"
//#include "xgpio.h"

#ifdef __MICROBLAZE__
#define CLK_FREQ XPAR_CPU_M_AXI_DP_FREQ_HZ
#else
#define CLK_FREQ 100000000 // FCLK0 frequency not found in xparameters.h
#endif




// BASEADDR DEF
#define GPIO_BASEADDR_1     	XPAR_PMODDHB1_0_AXI_LITE_GPIO_BASEADDR
#define PWM_BASEADDR_1      	XPAR_PMODDHB1_0_PWM_AXI_BASEADDR
#define MOTOR_FB_BASEADDR_1 	XPAR_PMODDHB1_0_MOTOR_FB_AXI_BASEADDR
#define LED_BASEADDR 			XPAR_GPIO_0_BASEADDR
#define PUSHBTN_BASEADDR  			0x40010000
#define ULTRASONIC_BASEADDR 	XPAR_OBJECTDETECTION_0_S00_AXI_BASEADDR
#define AUDIO_BASE_ADDR 		XPAR_AUDIO_AXI_V1_0_0_BASEADDR
#define WIDTH 					4
#define NUM_AUDIO_REGS 			64
#define PWM_PER              	2


volatile uint32_t * audioptr = (uint32_t *)(AUDIO_BASE_ADDR + 4);
volatile uint32_t * audiodataptr = (uint32_t *)(AUDIO_BASE_ADDR + WIDTH * 8);
volatile uint32_t * btn_addr = (uint32_t *)(PUSHBTN_BASEADDR);
volatile uint32_t * led = (uint32_t *)(LED_BASEADDR);

#define SENSOR_EDGES_PER_REV 4
#define GEARBOX_RATIO        48
PmodDHB1 pmodDHB1;


void turnByDegree(uint16_t angle);
int takeSample();









uint32_t prev_amplitude_5k = 0;
uint32_t amplitude_5k = 0;

bool dir = false;

int main()
{
    init_platform();

    print("Hello World\n\r");
    xil_printf("Hello 2\n\r");

    *led = 0;
    DHB1_begin(&pmodDHB1, GPIO_BASEADDR_1, PWM_BASEADDR_1, CLK_FREQ, PWM_PER);
    DHB1_setMotorSpeeds(&pmodDHB1, 40, 0);
    int timer;

    int sample[] = {0, 0, 0, 0};
    int da = 0;




    while (1)
	{

    	if(*btn_addr == 1){
			da += 1;
			*led = da;
			usleep(3000);
		}
    	if(*btn_addr == 2){
    			DHB1_setDirs(&pmodDHB1, 1,0);
    			DHB1_setMotorSpeeds(&pmodDHB1, 40, 40);
    			timer = 1700000 + da*100000;
    			DHB1_motorEnable(&pmodDHB1);
    			usleep(timer); // on rev timer = 2 90 timer = 6
    			DHB1_motorDisable(&pmodDHB1);
		}
    	if(*btn_addr == 4){
    		*led = 4;
    		DHB1_setDirs(&pmodDHB1, 1,1);
			DHB1_setMotorSpeeds(&pmodDHB1, 40, 40);
			DHB1_motorEnable(&pmodDHB1);
			usleep(1000000);
			DHB1_motorDisable(&pmodDHB1);

			//get foward sample
			usleep(10000);
			sample[0] = takeSample();
			*led = sample[0];

			DHB1_setDirs(&pmodDHB1, 0,0);
			DHB1_setMotorSpeeds(&pmodDHB1, 40, 40);
			DHB1_motorEnable(&pmodDHB1);
			usleep(2000000);
			DHB1_motorDisable(&pmodDHB1);

			//get back sanple
			usleep(10000);
			sample[1] =takeSample();
			*led = sample[1];

			// go back to origin
			DHB1_setDirs(&pmodDHB1, 1,1);
			DHB1_motorEnable(&pmodDHB1);
			usleep(1000000);
			DHB1_motorDisable(&pmodDHB1);

			// turn 90 degrees
			usleep(1000000);
			turnByDegree(90);

			DHB1_setDirs(&pmodDHB1, 1,1);
			DHB1_setMotorSpeeds(&pmodDHB1, 40, 40);
			DHB1_motorEnable(&pmodDHB1);
			usleep(1000000);
			DHB1_motorDisable(&pmodDHB1);

			//get left sample
			usleep(1000);
			sample[2] = takeSample();
			*led = sample[2];

			DHB1_setDirs(&pmodDHB1, 0,0);
			DHB1_setMotorSpeeds(&pmodDHB1, 40, 40);
			DHB1_motorEnable(&pmodDHB1);
			usleep(2000000);
			DHB1_motorDisable(&pmodDHB1);

			//get right sample
			usleep(1000);
			sample[3] = takeSample();
			*led = sample[3];



			// go back to origin
			DHB1_setDirs(&pmodDHB1, 1,1);
			DHB1_motorEnable(&pmodDHB1);
			usleep(1000000);
			DHB1_motorDisable(&pmodDHB1);

			usleep(1000000);
			turnByDegree(180);

		}

	}
    cleanup_platform();
    return 0;
}

int takeSample(){
	int intervals = 100;
	float dt = 10000/intervals;
	int total = 0;

	int i = 0;
	while(i<=intervals){
		total += *audiodataptr;
		usleep(dt);
		i+= 1;
	}
	return total/intervals;
}

void turnByDegree(uint16_t angle) {
	DHB1_setDirs(&pmodDHB1, 1,0);
	DHB1_setMotorSpeeds(&pmodDHB1, 40, 40);
	int timer;
	*led = angle;
	//2900000 - 90
	timer = 2300000 + angle * (6/90) *100000;
	DHB1_motorEnable(&pmodDHB1);
	usleep(timer); // on rev timer = 2 90 timer = 6
	DHB1_motorDisable(&pmodDHB1);

}



