/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A 
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR 
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION 
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE 
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO 
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO 
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE 
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 * 
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some 
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */

#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xintc.h"
#include "intc_header.h"
#include "xgpio.h"
#include "gpio_header.h"
#include "iic_header.h"
volatile uint32_t * temp = (uint32_t *)(XPAR_AXI_GPIO_3_BASEADDR);
int main () 
{
   static XIntc intc;
   Xil_ICacheEnable();
   Xil_DCacheEnable();
   while(1){
	   xil_printf("temp: %d\r\n", temp );
	   xil_printf("temp: %d\r\n", *temp );
   }


//   print("---Entering main---\n\r");
//
//
//   {
//      int status;
//
//      print("\r\n Running IntcSelfTestExample() for microblaze_0_axi_intc...\r\n");
//
//      status = IntcSelfTestExample(XPAR_MICROBLAZE_0_AXI_INTC_DEVICE_ID);
//
//      if (status == 0) {
//         print("IntcSelfTestExample PASSED\r\n");
//      }
//      else {
//         print("IntcSelfTestExample FAILED\r\n");
//      }
//   }
//
//   {
//       int Status;
//
//       Status = IntcInterruptSetup(&intc, XPAR_MICROBLAZE_0_AXI_INTC_DEVICE_ID);
//       if (Status == 0) {
//          print("Intc Interrupt Setup PASSED\r\n");
//       }
//       else {
//         print("Intc Interrupt Setup FAILED\r\n");
//      }
//   }
//
//
//
//   {
//      u32 status;
//
//      print("\r\nRunning GpioInputExample() for axi_gpio_1...\r\n");
//
//      u32 DataRead;
//
//      status = GpioInputExample(XPAR_AXI_GPIO_1_DEVICE_ID, &DataRead);
//
//      if (status == 0) {
//         xil_printf("GpioInputExample PASSED. Read data:0x%X\r\n", DataRead);
//      }
//      else {
//         print("GpioInputExample FAILED.\r\n");
//      }
//   }
//
//
//
//   {
//      u32 status;
//
//      print("\r\nRunning GpioOutputExample() for axi_gpio_2...\r\n");
//
//      status = GpioOutputExample(XPAR_AXI_GPIO_2_DEVICE_ID,1);
//
//      if (status == 0) {
//         print("GpioOutputExample PASSED.\r\n");
//      }
//      else {
//         print("GpioOutputExample FAILED.\r\n");
//      }
//   }
//
//
//
//   {
//      int status;
//
//
//      print("\r\n Running IicSelfTestExample() for axi_iic_0...\r\n");
//
//      status = IicSelfTestExample(XPAR_AXI_IIC_0_DEVICE_ID);
//
//      if (status == 0) {
//         print("IicSelfTestExample PASSED\r\n");
//      }
//      else {
//         print("IicSelfTestExample FAILED\r\n");
//      }
//   }
//
//
//
//   {
//      int status;
//
//
//      print("\r\n Running IicSelfTestExample() for axi_iic_1...\r\n");
//
//      status = IicSelfTestExample(XPAR_AXI_IIC_1_DEVICE_ID);
//
//      if (status == 0) {
//         print("IicSelfTestExample PASSED\r\n");
//      }
//      else {
//         print("IicSelfTestExample FAILED\r\n");
//      }
//   }
//
//
//   /*
//    * Peripheral SelfTest will not be run for axi_uartlite_0
//    * because it has been selected as the STDOUT device
//    */
//
//
//
//
//   {
//      u32 status;
//
//      print("\r\nRunning GpioOutputExample() for axi_gpio_0...\r\n");
//
//      status = GpioOutputExample(XPAR_AXI_GPIO_0_DEVICE_ID,16);
//
//      if (status == 0) {
//         print("GpioOutputExample PASSED.\r\n");
//      }
//      else {
//         print("GpioOutputExample FAILED.\r\n");
//      }
//   }


   print("---Exiting main---\n\r");
   Xil_DCacheDisable();
   Xil_ICacheDisable();
   return 0;
}
