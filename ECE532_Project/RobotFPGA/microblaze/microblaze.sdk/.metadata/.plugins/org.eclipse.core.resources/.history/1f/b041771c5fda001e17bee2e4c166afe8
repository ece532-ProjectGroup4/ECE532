/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <stdint.h>

// JOSH
#include "MotorFeedback.h"
#include "PmodDHB1.h"
#include "PWM.h"
#include "sleep.h"
#include "xil_cache.h"
//#include "xgpio.h"

#define AUDIO_BASE_ADDR 0x44a00000
#define WIDTH 4
#define NUM_AUDIO_REGS 64

volatile uint32_t * audioptr = (uint32_t *)(AUDIO_BASE_ADDR + 4);
volatile uint32_t * audiodataptr = (uint32_t *)(AUDIO_BASE_ADDR + WIDTH * 8);

// JOSH
#define GPIO_BASEADDR_1     0x00012000
#define PWM_BASEADDR_1      0x00011000
#define MOTOR_FB_BASEADDR_1 0x00010000
#define PWM_PER              2
#define SENSOR_EDGES_PER_REV 4
#define GEARBOX_RATIO        48
PmodDHB1 pmodDHB1;
MotorFeedback motorFeedback_1;
#ifdef __MICROBLAZE__
#define CLK_FREQ XPAR_CPU_M_AXI_DP_FREQ_HZ
#else
#define CLK_FREQ 100000000 // FCLK0 frequency not found in xparameters.h
#endif

uint32_t prev_amplitude_5k = 0;
uint32_t amplitude_5k = 0;

int main()
{
    init_platform();

    print("Hello World\n\r");
    xil_printf("Hello 2\n\r");

    DHB1_begin(&pmodDHB1, GPIO_BASEADDR_1, PWM_BASEADDR_1, CLK_FREQ, PWM_PER);
    DHB1_motorDisable(&pmodDHB1);


    while (1)
    {
    	xil_printf("==================================================================\r\n");
    	xil_printf("==================================================================\r\n");
    	xil_printf("NEW LOOP BELOW====================================================\r\n");
    	for (uint8_t i = 0; i < NUM_AUDIO_REGS; ++i)
    	{
    		volatile uint32_t * audio_register_ptr = (uint32_t *)(AUDIO_BASE_ADDR + (WIDTH * i));
    		volatile uint32_t value = *audio_register_ptr;
    		xil_printf("%d, %d\r\n", i, value);
    	}

    	volatile uint32_t * audio_register_ptr = (uint32_t *)(AUDIO_BASE_ADDR + (WIDTH * 64)); // DEADBEEF
		volatile uint32_t value = *audio_register_ptr;
		xil_printf("%d, %x\r\n", 64, value);

		audio_register_ptr = (uint32_t *)(AUDIO_BASE_ADDR + (WIDTH * 79)); // DEADEAD
		value = *audio_register_ptr;
		xil_printf("%d, %x\r\n", 79, value);
    	//volatile uint32_t val = *audioptr;
    	//volatile uint32_t dataval = *audiodataptr;
    	//xil_printf("AMPLITUDE OF 5kHz TONE: %d\r\n", dataval);

		// TRY TO GET AUDIO AMPLITUDE
		amplitude_5k = *audiodataptr;

		if (amplitude_5k > prev_amplitude_5k)
		{
			DHB1_setMotorSpeeds(&pmodDHB1, 35, 35);
			DHB1_setDirs(&pmodDHB1, 1, 1);
			DHB1_motorEnable(&pmodDHB1);
		}
		else
		{
			DHB1_setMotorSpeeds(&pmodDHB1, 35, 35);
			DHB1_setDirs(&pmodDHB1, 0, 0);
			DHB1_motorEnable(&pmodDHB1);
		}


		prev_amplitude_5k = amplitude_5k;


    }


    cleanup_platform();
    return 0;
}
